// This file was automatically generated by protocompiler
// DO NOT EDIT!
// Compiled from SFACollection.proto

#import "SECSFAAction.h"
#import <ProtocolBuffer/PBConstants.h>
#import <ProtocolBuffer/PBHashUtil.h>
#import <ProtocolBuffer/PBDataReader.h>

#import "SECSFAActionAutomaticBugCapture.h"
#import "SECSFAActionDropEvent.h"
#import "SECSFAActionTapToRadar.h"

#if !__has_feature(objc_arc)
# error This generated file depends on ARC but it is not enabled; turn on ARC, or use 'objc_use_arc' option to generate non-ARC code.
#endif

@implementation SECSFAAction

- (BOOL)hasRadarnumber
{
    return _radarnumber != nil;
}
@synthesize radarnumber = _radarnumber;
- (BOOL)hasTtr
{
    return _ttr != nil;
}
@synthesize ttr = _ttr;
- (void)setTtr:(SECSFAActionTapToRadar *)v
{
    [self clearOneofValuesForAction];
    self->_has.action = YES;
    self->_action = SECSFAAction_Action_Ttr;
    _ttr = v;
}
- (BOOL)hasAbc
{
    return _abc != nil;
}
@synthesize abc = _abc;
- (void)setAbc:(SECSFAActionAutomaticBugCapture *)v
{
    [self clearOneofValuesForAction];
    self->_has.action = YES;
    self->_action = SECSFAAction_Action_Abc;
    _abc = v;
}
- (BOOL)hasDrop
{
    return _drop != nil;
}
@synthesize drop = _drop;
- (void)setDrop:(SECSFAActionDropEvent *)v
{
    [self clearOneofValuesForAction];
    self->_has.action = YES;
    self->_action = SECSFAAction_Action_Drop;
    _drop = v;
}
@synthesize action = _action;
- (SECSFAAction_Action)action
{
    return _has.action ? _action : SECSFAAction_Action_PBUNSET;
}
- (void)setAction:(SECSFAAction_Action)v
{
    _has.action = (uint)YES;
    _action = v;
}
- (void)setHasAction:(BOOL)f
{
    _has.action = (uint)f;
}
- (BOOL)hasAction
{
    return _has.action != 0;
}
- (NSString *)actionAsString:(SECSFAAction_Action)value
{
    return SECSFAAction_ActionAsString(value);
}
- (SECSFAAction_Action)StringAsAction:(NSString *)str
{
    return StringAsSECSFAAction_Action(str);
}
- (void)clearOneofValuesForAction
{
    self->_has.action = NO;
    self->_action = SECSFAAction_Action_PBUNSET;
    self->_ttr = nil;
    self->_abc = nil;
    self->_drop = nil;
}

- (NSString *)description
{
    return [NSString stringWithFormat:@"%@ %@", [super description], [self dictionaryRepresentation]];
}

- (NSDictionary *)dictionaryRepresentation
{
    NSMutableDictionary *dict = [NSMutableDictionary dictionary];
    if (self->_radarnumber)
    {
        [dict setObject:self->_radarnumber forKey:@"radarnumber"];
    }
    if (self->_ttr)
    {
        [dict setObject:[_ttr dictionaryRepresentation] forKey:@"ttr"];
    }
    if (self->_abc)
    {
        [dict setObject:[_abc dictionaryRepresentation] forKey:@"abc"];
    }
    if (self->_drop)
    {
        [dict setObject:[_drop dictionaryRepresentation] forKey:@"drop"];
    }
    if (self->_has.action)
    {
        [dict setObject:SECSFAAction_ActionAsString(self->_action) forKey:@"Action"];
    }
    return dict;
}

BOOL SECSFAActionReadFrom(__unsafe_unretained SECSFAAction *self, __unsafe_unretained PBDataReader *reader) {
    while (PBReaderHasMoreData(reader)) {
        uint32_t tag = 0;
        uint8_t aType = 0;

        PBReaderReadTag32AndType(reader, &tag, &aType);

        if (PBReaderHasError(reader))
            break;

        if (aType == TYPE_END_GROUP) {
            break;
        }

        switch (tag) {

            case 0 /* action */:
            {
                /* Reading past oneof underlying variable, and discarding */
                PBReaderReadInt32(reader);
            }
            break;
            case 1 /* radarnumber */:
            {
                NSString *new_radarnumber = PBReaderReadString(reader);
                self->_radarnumber = new_radarnumber;
            }
            break;
            case 100 /* ttr */:
            {
                [self clearOneofValuesForAction];
                self->_has.action = YES;
                self->_action = SECSFAAction_Action_Ttr;
                SECSFAActionTapToRadar *new_ttr = [[SECSFAActionTapToRadar alloc] init];
                self->_ttr = new_ttr;
                PBDataReaderMark mark_ttr;
                BOOL markError = !PBReaderPlaceMark(reader, &mark_ttr);
                if (markError)
                {
                    return NO;
                }
                BOOL inError = !SECSFAActionTapToRadarReadFrom(new_ttr, reader);
                if (inError)
                {
                    return NO;
                }
                PBReaderRecallMark(reader, &mark_ttr);
            }
            break;
            case 101 /* abc */:
            {
                [self clearOneofValuesForAction];
                self->_has.action = YES;
                self->_action = SECSFAAction_Action_Abc;
                SECSFAActionAutomaticBugCapture *new_abc = [[SECSFAActionAutomaticBugCapture alloc] init];
                self->_abc = new_abc;
                PBDataReaderMark mark_abc;
                BOOL markError = !PBReaderPlaceMark(reader, &mark_abc);
                if (markError)
                {
                    return NO;
                }
                BOOL inError = !SECSFAActionAutomaticBugCaptureReadFrom(new_abc, reader);
                if (inError)
                {
                    return NO;
                }
                PBReaderRecallMark(reader, &mark_abc);
            }
            break;
            case 102 /* drop */:
            {
                [self clearOneofValuesForAction];
                self->_has.action = YES;
                self->_action = SECSFAAction_Action_Drop;
                SECSFAActionDropEvent *new_drop = [[SECSFAActionDropEvent alloc] init];
                self->_drop = new_drop;
                PBDataReaderMark mark_drop;
                BOOL markError = !PBReaderPlaceMark(reader, &mark_drop);
                if (markError)
                {
                    return NO;
                }
                BOOL inError = !SECSFAActionDropEventReadFrom(new_drop, reader);
                if (inError)
                {
                    return NO;
                }
                PBReaderRecallMark(reader, &mark_drop);
            }
            break;
            default:
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    return NO;
                break;
        }
    }
    return !PBReaderHasError(reader);
}

- (BOOL)readFrom:(PBDataReader *)reader
{
    return SECSFAActionReadFrom(self, reader);
}
- (void)writeTo:(PBDataWriter *)writer
{
    /* action */
    {
        /* Skipping oneof underlying variable */
    }
    /* radarnumber */
    {
        if (self->_radarnumber)
        {
            PBDataWriterWriteStringField(writer, self->_radarnumber, 1);
        }
    }
    /* ttr */
    {
        if (self->_ttr != nil)
        {
            PBDataWriterWriteSubmessage(writer, self->_ttr, 100);
        }
    }
    /* abc */
    {
        if (self->_abc != nil)
        {
            PBDataWriterWriteSubmessage(writer, self->_abc, 101);
        }
    }
    /* drop */
    {
        if (self->_drop != nil)
        {
            PBDataWriterWriteSubmessage(writer, self->_drop, 102);
        }
    }
}

- (void)copyTo:(SECSFAAction *)other
{
    if (self->_has.action)
    {
        other->_action = _action;
        other->_has.action = YES;
    }
    if (_radarnumber)
    {
        other.radarnumber = _radarnumber;
    }
    if (_ttr)
    {
        other.ttr = _ttr;
    }
    if (_abc)
    {
        other.abc = _abc;
    }
    if (_drop)
    {
        other.drop = _drop;
    }
}

- (id)copyWithZone:(NSZone *)zone
{
    SECSFAAction *copy = [[[self class] allocWithZone:zone] init];
    if (self->_has.action)
    {
        copy->_action = _action;
        copy->_has.action = YES;
    }
    copy->_radarnumber = [_radarnumber copyWithZone:zone];
    copy->_ttr = [_ttr copyWithZone:zone];
    copy->_abc = [_abc copyWithZone:zone];
    copy->_drop = [_drop copyWithZone:zone];
    return copy;
}

- (BOOL)isEqual:(id)object
{
    SECSFAAction *other = (SECSFAAction *)object;
    return [other isMemberOfClass:[self class]]
    &&
    ((self->_has.action && other->_has.action && self->_action == other->_action) || (!self->_has.action && !other->_has.action))
    &&
    ((!self->_radarnumber && !other->_radarnumber) || [self->_radarnumber isEqual:other->_radarnumber])
    &&
    ((!self->_ttr && !other->_ttr) || [self->_ttr isEqual:other->_ttr])
    &&
    ((!self->_abc && !other->_abc) || [self->_abc isEqual:other->_abc])
    &&
    ((!self->_drop && !other->_drop) || [self->_drop isEqual:other->_drop])
    ;
}

- (NSUInteger)hash
{
    return 0
    ^
    (self->_has.action ? PBHashInt((NSUInteger)self->_action) : 0)
    ^
    [self->_radarnumber hash]
    ^
    [self->_ttr hash]
    ^
    [self->_abc hash]
    ^
    [self->_drop hash]
    ;
}

- (void)mergeFrom:(SECSFAAction *)other
{
    if (other->_has.action)
    {
        self->_action = other->_action;
        self->_has.action = YES;
    }
    if (other->_radarnumber)
    {
        [self setRadarnumber:other->_radarnumber];
    }
    if (self->_ttr && other->_ttr)
    {
        [self->_ttr mergeFrom:other->_ttr];
    }
    else if (!self->_ttr && other->_ttr)
    {
        [self setTtr:other->_ttr];
    }
    if (self->_abc && other->_abc)
    {
        [self->_abc mergeFrom:other->_abc];
    }
    else if (!self->_abc && other->_abc)
    {
        [self setAbc:other->_abc];
    }
    if (self->_drop && other->_drop)
    {
        [self->_drop mergeFrom:other->_drop];
    }
    else if (!self->_drop && other->_drop)
    {
        [self setDrop:other->_drop];
    }
}

@end

