// This file was automatically generated by protocompiler
// DO NOT EDIT!
// Compiled from SFACollection.proto

#import "SECSFAActionAutomaticBugCapture.h"
#import <ProtocolBuffer/PBConstants.h>
#import <ProtocolBuffer/PBHashUtil.h>
#import <ProtocolBuffer/PBDataReader.h>

#if !__has_feature(objc_arc)
# error This generated file depends on ARC but it is not enabled; turn on ARC, or use 'objc_use_arc' option to generate non-ARC code.
#endif

@implementation SECSFAActionAutomaticBugCapture

- (BOOL)hasDomain
{
    return _domain != nil;
}
@synthesize domain = _domain;
- (BOOL)hasType
{
    return _type != nil;
}
@synthesize type = _type;
- (BOOL)hasSubtype
{
    return _subtype != nil;
}
@synthesize subtype = _subtype;

- (NSString *)description
{
    return [NSString stringWithFormat:@"%@ %@", [super description], [self dictionaryRepresentation]];
}

- (NSDictionary *)dictionaryRepresentation
{
    NSMutableDictionary *dict = [NSMutableDictionary dictionary];
    if (self->_domain)
    {
        [dict setObject:self->_domain forKey:@"domain"];
    }
    if (self->_type)
    {
        [dict setObject:self->_type forKey:@"type"];
    }
    if (self->_subtype)
    {
        [dict setObject:self->_subtype forKey:@"subtype"];
    }
    return dict;
}

BOOL SECSFAActionAutomaticBugCaptureReadFrom(__unsafe_unretained SECSFAActionAutomaticBugCapture *self, __unsafe_unretained PBDataReader *reader) {
    while (PBReaderHasMoreData(reader)) {
        uint32_t tag = 0;
        uint8_t aType = 0;

        PBReaderReadTag32AndType(reader, &tag, &aType);

        if (PBReaderHasError(reader))
            break;

        if (aType == TYPE_END_GROUP) {
            break;
        }

        switch (tag) {

            case 1 /* domain */:
            {
                NSString *new_domain = PBReaderReadString(reader);
                self->_domain = new_domain;
            }
            break;
            case 2 /* type */:
            {
                NSString *new_type = PBReaderReadString(reader);
                self->_type = new_type;
            }
            break;
            case 3 /* subtype */:
            {
                NSString *new_subtype = PBReaderReadString(reader);
                self->_subtype = new_subtype;
            }
            break;
            default:
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    return NO;
                break;
        }
    }
    return !PBReaderHasError(reader);
}

- (BOOL)readFrom:(PBDataReader *)reader
{
    return SECSFAActionAutomaticBugCaptureReadFrom(self, reader);
}
- (void)writeTo:(PBDataWriter *)writer
{
    /* domain */
    {
        if (self->_domain)
        {
            PBDataWriterWriteStringField(writer, self->_domain, 1);
        }
    }
    /* type */
    {
        if (self->_type)
        {
            PBDataWriterWriteStringField(writer, self->_type, 2);
        }
    }
    /* subtype */
    {
        if (self->_subtype)
        {
            PBDataWriterWriteStringField(writer, self->_subtype, 3);
        }
    }
}

- (void)copyTo:(SECSFAActionAutomaticBugCapture *)other
{
    if (_domain)
    {
        other.domain = _domain;
    }
    if (_type)
    {
        other.type = _type;
    }
    if (_subtype)
    {
        other.subtype = _subtype;
    }
}

- (id)copyWithZone:(NSZone *)zone
{
    SECSFAActionAutomaticBugCapture *copy = [[[self class] allocWithZone:zone] init];
    copy->_domain = [_domain copyWithZone:zone];
    copy->_type = [_type copyWithZone:zone];
    copy->_subtype = [_subtype copyWithZone:zone];
    return copy;
}

- (BOOL)isEqual:(id)object
{
    SECSFAActionAutomaticBugCapture *other = (SECSFAActionAutomaticBugCapture *)object;
    return [other isMemberOfClass:[self class]]
    &&
    ((!self->_domain && !other->_domain) || [self->_domain isEqual:other->_domain])
    &&
    ((!self->_type && !other->_type) || [self->_type isEqual:other->_type])
    &&
    ((!self->_subtype && !other->_subtype) || [self->_subtype isEqual:other->_subtype])
    ;
}

- (NSUInteger)hash
{
    return 0
    ^
    [self->_domain hash]
    ^
    [self->_type hash]
    ^
    [self->_subtype hash]
    ;
}

- (void)mergeFrom:(SECSFAActionAutomaticBugCapture *)other
{
    if (other->_domain)
    {
        [self setDomain:other->_domain];
    }
    if (other->_type)
    {
        [self setType:other->_type];
    }
    if (other->_subtype)
    {
        [self setSubtype:other->_subtype];
    }
}

@end

