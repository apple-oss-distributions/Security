// This file was automatically generated by protocompiler
// DO NOT EDIT!
// Compiled from OTAccountMetadataClassC.proto

#import "OTAccountMetadataClassC.h"
#import <ProtocolBuffer/PBConstants.h>
#import <ProtocolBuffer/PBHashUtil.h>
#import <ProtocolBuffer/PBDataReader.h>

#if !__has_feature(objc_arc)
# error This generated file depends on ARC but it is not enabled; turn on ARC, or use 'objc_use_arc' option to generate non-ARC code.
#endif

@implementation OTAccountMetadataClassC

- (BOOL)hasPeerID
{
    return _peerID != nil;
}
@synthesize peerID = _peerID;
@synthesize icloudAccountState = _icloudAccountState;
- (OTAccountMetadataClassC_AccountState)icloudAccountState
{
    return _has.icloudAccountState ? _icloudAccountState : OTAccountMetadataClassC_AccountState_UNKNOWN;
}
- (void)setIcloudAccountState:(OTAccountMetadataClassC_AccountState)v
{
    _has.icloudAccountState = (uint)YES;
    _icloudAccountState = v;
}
- (void)setHasIcloudAccountState:(BOOL)f
{
    _has.icloudAccountState = (uint)f;
}
- (BOOL)hasIcloudAccountState
{
    return _has.icloudAccountState != 0;
}
- (NSString *)icloudAccountStateAsString:(OTAccountMetadataClassC_AccountState)value
{
    return OTAccountMetadataClassC_AccountStateAsString(value);
}
- (OTAccountMetadataClassC_AccountState)StringAsIcloudAccountState:(NSString *)str
{
    return StringAsOTAccountMetadataClassC_AccountState(str);
}
@synthesize epoch = _epoch;
- (void)setEpoch:(int64_t)v
{
    _has.epoch = (uint)YES;
    _epoch = v;
}
- (void)setHasEpoch:(BOOL)f
{
    _has.epoch = (uint)f;
}
- (BOOL)hasEpoch
{
    return _has.epoch != 0;
}
- (BOOL)hasAltDSID
{
    return _altDSID != nil;
}
@synthesize altDSID = _altDSID;
@synthesize trustState = _trustState;
- (OTAccountMetadataClassC_TrustState)trustState
{
    return _has.trustState ? _trustState : OTAccountMetadataClassC_TrustState_UNKNOWN;
}
- (void)setTrustState:(OTAccountMetadataClassC_TrustState)v
{
    _has.trustState = (uint)YES;
    _trustState = v;
}
- (void)setHasTrustState:(BOOL)f
{
    _has.trustState = (uint)f;
}
- (BOOL)hasTrustState
{
    return _has.trustState != 0;
}
- (NSString *)trustStateAsString:(OTAccountMetadataClassC_TrustState)value
{
    return OTAccountMetadataClassC_TrustStateAsString(value);
}
- (OTAccountMetadataClassC_TrustState)StringAsTrustState:(NSString *)str
{
    return StringAsOTAccountMetadataClassC_TrustState(str);
}
@synthesize lastHealthCheckup = _lastHealthCheckup;
- (void)setLastHealthCheckup:(uint64_t)v
{
    _has.lastHealthCheckup = (uint)YES;
    _lastHealthCheckup = v;
}
- (void)setHasLastHealthCheckup:(BOOL)f
{
    _has.lastHealthCheckup = (uint)f;
}
- (BOOL)hasLastHealthCheckup
{
    return _has.lastHealthCheckup != 0;
}
@synthesize attemptedJoin = _attemptedJoin;
- (OTAccountMetadataClassC_AttemptedAJoinState)attemptedJoin
{
    return _has.attemptedJoin ? _attemptedJoin : OTAccountMetadataClassC_AttemptedAJoinState_UNKNOWN;
}
- (void)setAttemptedJoin:(OTAccountMetadataClassC_AttemptedAJoinState)v
{
    _has.attemptedJoin = (uint)YES;
    _attemptedJoin = v;
}
- (void)setHasAttemptedJoin:(BOOL)f
{
    _has.attemptedJoin = (uint)f;
}
- (BOOL)hasAttemptedJoin
{
    return _has.attemptedJoin != 0;
}
- (NSString *)attemptedJoinAsString:(OTAccountMetadataClassC_AttemptedAJoinState)value
{
    return OTAccountMetadataClassC_AttemptedAJoinStateAsString(value);
}
- (OTAccountMetadataClassC_AttemptedAJoinState)StringAsAttemptedJoin:(NSString *)str
{
    return StringAsOTAccountMetadataClassC_AttemptedAJoinState(str);
}
@synthesize cdpState = _cdpState;
- (OTAccountMetadataClassC_CDPState)cdpState
{
    return _has.cdpState ? _cdpState : OTAccountMetadataClassC_CDPState_UNKNOWN;
}
- (void)setCdpState:(OTAccountMetadataClassC_CDPState)v
{
    _has.cdpState = (uint)YES;
    _cdpState = v;
}
- (void)setHasCdpState:(BOOL)f
{
    _has.cdpState = (uint)f;
}
- (BOOL)hasCdpState
{
    return _has.cdpState != 0;
}
- (NSString *)cdpStateAsString:(OTAccountMetadataClassC_CDPState)value
{
    return OTAccountMetadataClassC_CDPStateAsString(value);
}
- (OTAccountMetadataClassC_CDPState)StringAsCdpState:(NSString *)str
{
    return StringAsOTAccountMetadataClassC_CDPState(str);
}
- (BOOL)hasSyncingPolicy
{
    return _syncingPolicy != nil;
}
@synthesize syncingPolicy = _syncingPolicy;
- (BOOL)hasVoucher
{
    return _voucher != nil;
}
@synthesize voucher = _voucher;
- (BOOL)hasVoucherSignature
{
    return _voucherSignature != nil;
}
@synthesize voucherSignature = _voucherSignature;
@synthesize tlkSharesForVouchedIdentitys = _tlkSharesForVouchedIdentitys;
- (void)clearTlkSharesForVouchedIdentitys
{
    [_tlkSharesForVouchedIdentitys removeAllObjects];
}
- (void)addTlkSharesForVouchedIdentity:(NSData *)i
{
    if (!_tlkSharesForVouchedIdentitys)
    {
        _tlkSharesForVouchedIdentitys = [[NSMutableArray alloc] init];
    }
    [_tlkSharesForVouchedIdentitys addObject:i];
}
- (NSUInteger)tlkSharesForVouchedIdentitysCount
{
    return [_tlkSharesForVouchedIdentitys count];
}
- (NSData *)tlkSharesForVouchedIdentityAtIndex:(NSUInteger)idx
{
    return [_tlkSharesForVouchedIdentitys objectAtIndex:idx];
}
+ (Class)tlkSharesForVouchedIdentityType
{
    return [NSData class];
}
- (BOOL)hasSecureElementIdentity
{
    return _secureElementIdentity != nil;
}
@synthesize secureElementIdentity = _secureElementIdentity;
@synthesize isInheritedAccount = _isInheritedAccount;
- (void)setIsInheritedAccount:(BOOL)v
{
    _has.isInheritedAccount = (uint)YES;
    _isInheritedAccount = v;
}
- (void)setHasIsInheritedAccount:(BOOL)f
{
    _has.isInheritedAccount = (uint)f;
}
- (BOOL)hasIsInheritedAccount
{
    return _has.isInheritedAccount != 0;
}
@synthesize warmedEscrowCache = _warmedEscrowCache;
- (void)setWarmedEscrowCache:(BOOL)v
{
    _has.warmedEscrowCache = (uint)YES;
    _warmedEscrowCache = v;
}
- (void)setHasWarmedEscrowCache:(BOOL)f
{
    _has.warmedEscrowCache = (uint)f;
}
- (BOOL)hasWarmedEscrowCache
{
    return _has.warmedEscrowCache != 0;
}
@synthesize warnedTooManyPeers = _warnedTooManyPeers;
- (void)setWarnedTooManyPeers:(BOOL)v
{
    _has.warnedTooManyPeers = (uint)YES;
    _warnedTooManyPeers = v;
}
- (void)setHasWarnedTooManyPeers:(BOOL)f
{
    _has.warnedTooManyPeers = (uint)f;
}
- (BOOL)hasWarnedTooManyPeers
{
    return _has.warnedTooManyPeers != 0;
}
@synthesize sendingMetricsPermitted = _sendingMetricsPermitted;
- (OTAccountMetadataClassC_MetricsState)sendingMetricsPermitted
{
    return _has.sendingMetricsPermitted ? _sendingMetricsPermitted : OTAccountMetadataClassC_MetricsState_UNKNOWN;
}
- (void)setSendingMetricsPermitted:(OTAccountMetadataClassC_MetricsState)v
{
    _has.sendingMetricsPermitted = (uint)YES;
    _sendingMetricsPermitted = v;
}
- (void)setHasSendingMetricsPermitted:(BOOL)f
{
    _has.sendingMetricsPermitted = (uint)f;
}
- (BOOL)hasSendingMetricsPermitted
{
    return _has.sendingMetricsPermitted != 0;
}
- (NSString *)sendingMetricsPermittedAsString:(OTAccountMetadataClassC_MetricsState)value
{
    return OTAccountMetadataClassC_MetricsStateAsString(value);
}
- (OTAccountMetadataClassC_MetricsState)StringAsSendingMetricsPermitted:(NSString *)str
{
    return StringAsOTAccountMetadataClassC_MetricsState(str);
}
- (BOOL)hasOldPeerID
{
    return _oldPeerID != nil;
}
@synthesize oldPeerID = _oldPeerID;

- (NSString *)description
{
    return [NSString stringWithFormat:@"%@ %@", [super description], [self dictionaryRepresentation]];
}

- (NSDictionary *)dictionaryRepresentation
{
    NSMutableDictionary *dict = [NSMutableDictionary dictionary];
    if (self->_peerID)
    {
        [dict setObject:self->_peerID forKey:@"peerID"];
    }
    if (self->_has.icloudAccountState)
    {
        [dict setObject:OTAccountMetadataClassC_AccountStateAsString(self->_icloudAccountState) forKey:@"icloudAccountState"];
    }
    if (self->_has.epoch)
    {
        [dict setObject:[NSNumber numberWithLongLong:self->_epoch] forKey:@"epoch"];
    }
    if (self->_altDSID)
    {
        [dict setObject:self->_altDSID forKey:@"altDSID"];
    }
    if (self->_has.trustState)
    {
        [dict setObject:OTAccountMetadataClassC_TrustStateAsString(self->_trustState) forKey:@"trustState"];
    }
    if (self->_has.lastHealthCheckup)
    {
        [dict setObject:[NSNumber numberWithUnsignedLongLong:self->_lastHealthCheckup] forKey:@"lastHealthCheckup"];
    }
    if (self->_has.attemptedJoin)
    {
        [dict setObject:OTAccountMetadataClassC_AttemptedAJoinStateAsString(self->_attemptedJoin) forKey:@"attemptedJoin"];
    }
    if (self->_has.cdpState)
    {
        [dict setObject:OTAccountMetadataClassC_CDPStateAsString(self->_cdpState) forKey:@"cdpState"];
    }
    if (self->_syncingPolicy)
    {
        [dict setObject:self->_syncingPolicy forKey:@"syncingPolicy"];
    }
    if (self->_voucher)
    {
        [dict setObject:self->_voucher forKey:@"voucher"];
    }
    if (self->_voucherSignature)
    {
        [dict setObject:self->_voucherSignature forKey:@"voucherSignature"];
    }
    if (self->_tlkSharesForVouchedIdentitys)
    {
        [dict setObject:self->_tlkSharesForVouchedIdentitys forKey:@"tlkSharesForVouchedIdentity"];
    }
    if (self->_secureElementIdentity)
    {
        [dict setObject:self->_secureElementIdentity forKey:@"secureElementIdentity"];
    }
    if (self->_has.isInheritedAccount)
    {
        [dict setObject:[NSNumber numberWithBool:self->_isInheritedAccount] forKey:@"isInheritedAccount"];
    }
    if (self->_has.warmedEscrowCache)
    {
        [dict setObject:[NSNumber numberWithBool:self->_warmedEscrowCache] forKey:@"warmedEscrowCache"];
    }
    if (self->_has.warnedTooManyPeers)
    {
        [dict setObject:[NSNumber numberWithBool:self->_warnedTooManyPeers] forKey:@"warnedTooManyPeers"];
    }
    if (self->_has.sendingMetricsPermitted)
    {
        [dict setObject:OTAccountMetadataClassC_MetricsStateAsString(self->_sendingMetricsPermitted) forKey:@"sendingMetricsPermitted"];
    }
    if (self->_oldPeerID)
    {
        [dict setObject:self->_oldPeerID forKey:@"oldPeerID"];
    }
    return dict;
}

BOOL OTAccountMetadataClassCReadFrom(__unsafe_unretained OTAccountMetadataClassC *self, __unsafe_unretained PBDataReader *reader) {
    while (PBReaderHasMoreData(reader)) {
        uint32_t tag = 0;
        uint8_t aType = 0;

        PBReaderReadTag32AndType(reader, &tag, &aType);

        if (PBReaderHasError(reader))
            break;

        if (aType == TYPE_END_GROUP) {
            break;
        }

        switch (tag) {

            case 1 /* peerID */:
            {
                NSString *new_peerID = PBReaderReadString(reader);
                self->_peerID = new_peerID;
            }
            break;
            case 2 /* icloudAccountState */:
            {
                self->_has.icloudAccountState = (uint)YES;
                self->_icloudAccountState = PBReaderReadInt32(reader);
            }
            break;
            case 3 /* epoch */:
            {
                self->_has.epoch = (uint)YES;
                self->_epoch = PBReaderReadInt64(reader);
            }
            break;
            case 4 /* altDSID */:
            {
                NSString *new_altDSID = PBReaderReadString(reader);
                self->_altDSID = new_altDSID;
            }
            break;
            case 5 /* trustState */:
            {
                self->_has.trustState = (uint)YES;
                self->_trustState = PBReaderReadInt32(reader);
            }
            break;
            case 6 /* lastHealthCheckup */:
            {
                self->_has.lastHealthCheckup = (uint)YES;
                self->_lastHealthCheckup = PBReaderReadUint64(reader);
            }
            break;
            case 7 /* attemptedJoin */:
            {
                self->_has.attemptedJoin = (uint)YES;
                self->_attemptedJoin = PBReaderReadInt32(reader);
            }
            break;
            case 8 /* cdpState */:
            {
                self->_has.cdpState = (uint)YES;
                self->_cdpState = PBReaderReadInt32(reader);
            }
            break;
            case 11 /* syncingPolicy */:
            {
                NSData *new_syncingPolicy = PBReaderReadData(reader);
                self->_syncingPolicy = new_syncingPolicy;
            }
            break;
            case 12 /* voucher */:
            {
                NSData *new_voucher = PBReaderReadData(reader);
                self->_voucher = new_voucher;
            }
            break;
            case 13 /* voucherSignature */:
            {
                NSData *new_voucherSignature = PBReaderReadData(reader);
                self->_voucherSignature = new_voucherSignature;
            }
            break;
            case 14 /* tlkSharesForVouchedIdentitys */:
            {
                NSData *new_tlkSharesForVouchedIdentitys = PBReaderReadData(reader);
                if (new_tlkSharesForVouchedIdentitys)
                {
                    [self addTlkSharesForVouchedIdentity:new_tlkSharesForVouchedIdentitys];
                }
            }
            break;
            case 15 /* secureElementIdentity */:
            {
                NSData *new_secureElementIdentity = PBReaderReadData(reader);
                self->_secureElementIdentity = new_secureElementIdentity;
            }
            break;
            case 18 /* isInheritedAccount */:
            {
                self->_has.isInheritedAccount = (uint)YES;
                self->_isInheritedAccount = PBReaderReadBOOL(reader);
            }
            break;
            case 19 /* warmedEscrowCache */:
            {
                self->_has.warmedEscrowCache = (uint)YES;
                self->_warmedEscrowCache = PBReaderReadBOOL(reader);
            }
            break;
            case 20 /* warnedTooManyPeers */:
            {
                self->_has.warnedTooManyPeers = (uint)YES;
                self->_warnedTooManyPeers = PBReaderReadBOOL(reader);
            }
            break;
            case 22 /* sendingMetricsPermitted */:
            {
                self->_has.sendingMetricsPermitted = (uint)YES;
                self->_sendingMetricsPermitted = PBReaderReadInt32(reader);
            }
            break;
            case 23 /* oldPeerID */:
            {
                NSString *new_oldPeerID = PBReaderReadString(reader);
                self->_oldPeerID = new_oldPeerID;
            }
            break;
            default:
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    return NO;
                break;
        }
    }
    return !PBReaderHasError(reader);
}

- (BOOL)readFrom:(PBDataReader *)reader
{
    return OTAccountMetadataClassCReadFrom(self, reader);
}
- (void)writeTo:(PBDataWriter *)writer
{
    /* peerID */
    {
        if (self->_peerID)
        {
            PBDataWriterWriteStringField(writer, self->_peerID, 1);
        }
    }
    /* icloudAccountState */
    {
        if (self->_has.icloudAccountState)
        {
            PBDataWriterWriteInt32Field(writer, self->_icloudAccountState, 2);
        }
    }
    /* epoch */
    {
        if (self->_has.epoch)
        {
            PBDataWriterWriteInt64Field(writer, self->_epoch, 3);
        }
    }
    /* altDSID */
    {
        if (self->_altDSID)
        {
            PBDataWriterWriteStringField(writer, self->_altDSID, 4);
        }
    }
    /* trustState */
    {
        if (self->_has.trustState)
        {
            PBDataWriterWriteInt32Field(writer, self->_trustState, 5);
        }
    }
    /* lastHealthCheckup */
    {
        if (self->_has.lastHealthCheckup)
        {
            PBDataWriterWriteUint64Field(writer, self->_lastHealthCheckup, 6);
        }
    }
    /* attemptedJoin */
    {
        if (self->_has.attemptedJoin)
        {
            PBDataWriterWriteInt32Field(writer, self->_attemptedJoin, 7);
        }
    }
    /* cdpState */
    {
        if (self->_has.cdpState)
        {
            PBDataWriterWriteInt32Field(writer, self->_cdpState, 8);
        }
    }
    /* syncingPolicy */
    {
        if (self->_syncingPolicy)
        {
            PBDataWriterWriteDataField(writer, self->_syncingPolicy, 11);
        }
    }
    /* voucher */
    {
        if (self->_voucher)
        {
            PBDataWriterWriteDataField(writer, self->_voucher, 12);
        }
    }
    /* voucherSignature */
    {
        if (self->_voucherSignature)
        {
            PBDataWriterWriteDataField(writer, self->_voucherSignature, 13);
        }
    }
    /* tlkSharesForVouchedIdentitys */
    {
        for (NSData *s_tlkSharesForVouchedIdentitys in self->_tlkSharesForVouchedIdentitys)
        {
            PBDataWriterWriteDataField(writer, s_tlkSharesForVouchedIdentitys, 14);
        }
    }
    /* secureElementIdentity */
    {
        if (self->_secureElementIdentity)
        {
            PBDataWriterWriteDataField(writer, self->_secureElementIdentity, 15);
        }
    }
    /* isInheritedAccount */
    {
        if (self->_has.isInheritedAccount)
        {
            PBDataWriterWriteBOOLField(writer, self->_isInheritedAccount, 18);
        }
    }
    /* warmedEscrowCache */
    {
        if (self->_has.warmedEscrowCache)
        {
            PBDataWriterWriteBOOLField(writer, self->_warmedEscrowCache, 19);
        }
    }
    /* warnedTooManyPeers */
    {
        if (self->_has.warnedTooManyPeers)
        {
            PBDataWriterWriteBOOLField(writer, self->_warnedTooManyPeers, 20);
        }
    }
    /* sendingMetricsPermitted */
    {
        if (self->_has.sendingMetricsPermitted)
        {
            PBDataWriterWriteInt32Field(writer, self->_sendingMetricsPermitted, 22);
        }
    }
    /* oldPeerID */
    {
        if (self->_oldPeerID)
        {
            PBDataWriterWriteStringField(writer, self->_oldPeerID, 23);
        }
    }
}

- (void)copyTo:(OTAccountMetadataClassC *)other
{
    if (_peerID)
    {
        other.peerID = _peerID;
    }
    if (self->_has.icloudAccountState)
    {
        other->_icloudAccountState = _icloudAccountState;
        other->_has.icloudAccountState = YES;
    }
    if (self->_has.epoch)
    {
        other->_epoch = _epoch;
        other->_has.epoch = YES;
    }
    if (_altDSID)
    {
        other.altDSID = _altDSID;
    }
    if (self->_has.trustState)
    {
        other->_trustState = _trustState;
        other->_has.trustState = YES;
    }
    if (self->_has.lastHealthCheckup)
    {
        other->_lastHealthCheckup = _lastHealthCheckup;
        other->_has.lastHealthCheckup = YES;
    }
    if (self->_has.attemptedJoin)
    {
        other->_attemptedJoin = _attemptedJoin;
        other->_has.attemptedJoin = YES;
    }
    if (self->_has.cdpState)
    {
        other->_cdpState = _cdpState;
        other->_has.cdpState = YES;
    }
    if (_syncingPolicy)
    {
        other.syncingPolicy = _syncingPolicy;
    }
    if (_voucher)
    {
        other.voucher = _voucher;
    }
    if (_voucherSignature)
    {
        other.voucherSignature = _voucherSignature;
    }
    if ([self tlkSharesForVouchedIdentitysCount])
    {
        [other clearTlkSharesForVouchedIdentitys];
        NSUInteger tlkSharesForVouchedIdentitysCnt = [self tlkSharesForVouchedIdentitysCount];
        for (NSUInteger i = 0; i < tlkSharesForVouchedIdentitysCnt; i++)
        {
            [other addTlkSharesForVouchedIdentity:[self tlkSharesForVouchedIdentityAtIndex:i]];
        }
    }
    if (_secureElementIdentity)
    {
        other.secureElementIdentity = _secureElementIdentity;
    }
    if (self->_has.isInheritedAccount)
    {
        other->_isInheritedAccount = _isInheritedAccount;
        other->_has.isInheritedAccount = YES;
    }
    if (self->_has.warmedEscrowCache)
    {
        other->_warmedEscrowCache = _warmedEscrowCache;
        other->_has.warmedEscrowCache = YES;
    }
    if (self->_has.warnedTooManyPeers)
    {
        other->_warnedTooManyPeers = _warnedTooManyPeers;
        other->_has.warnedTooManyPeers = YES;
    }
    if (self->_has.sendingMetricsPermitted)
    {
        other->_sendingMetricsPermitted = _sendingMetricsPermitted;
        other->_has.sendingMetricsPermitted = YES;
    }
    if (_oldPeerID)
    {
        other.oldPeerID = _oldPeerID;
    }
}

- (id)copyWithZone:(NSZone *)zone
{
    OTAccountMetadataClassC *copy = [[[self class] allocWithZone:zone] init];
    copy->_peerID = [_peerID copyWithZone:zone];
    if (self->_has.icloudAccountState)
    {
        copy->_icloudAccountState = _icloudAccountState;
        copy->_has.icloudAccountState = YES;
    }
    if (self->_has.epoch)
    {
        copy->_epoch = _epoch;
        copy->_has.epoch = YES;
    }
    copy->_altDSID = [_altDSID copyWithZone:zone];
    if (self->_has.trustState)
    {
        copy->_trustState = _trustState;
        copy->_has.trustState = YES;
    }
    if (self->_has.lastHealthCheckup)
    {
        copy->_lastHealthCheckup = _lastHealthCheckup;
        copy->_has.lastHealthCheckup = YES;
    }
    if (self->_has.attemptedJoin)
    {
        copy->_attemptedJoin = _attemptedJoin;
        copy->_has.attemptedJoin = YES;
    }
    if (self->_has.cdpState)
    {
        copy->_cdpState = _cdpState;
        copy->_has.cdpState = YES;
    }
    copy->_syncingPolicy = [_syncingPolicy copyWithZone:zone];
    copy->_voucher = [_voucher copyWithZone:zone];
    copy->_voucherSignature = [_voucherSignature copyWithZone:zone];
    for (NSData *v in _tlkSharesForVouchedIdentitys)
    {
        NSData *vCopy = [v copyWithZone:zone];
        [copy addTlkSharesForVouchedIdentity:vCopy];
    }
    copy->_secureElementIdentity = [_secureElementIdentity copyWithZone:zone];
    if (self->_has.isInheritedAccount)
    {
        copy->_isInheritedAccount = _isInheritedAccount;
        copy->_has.isInheritedAccount = YES;
    }
    if (self->_has.warmedEscrowCache)
    {
        copy->_warmedEscrowCache = _warmedEscrowCache;
        copy->_has.warmedEscrowCache = YES;
    }
    if (self->_has.warnedTooManyPeers)
    {
        copy->_warnedTooManyPeers = _warnedTooManyPeers;
        copy->_has.warnedTooManyPeers = YES;
    }
    if (self->_has.sendingMetricsPermitted)
    {
        copy->_sendingMetricsPermitted = _sendingMetricsPermitted;
        copy->_has.sendingMetricsPermitted = YES;
    }
    copy->_oldPeerID = [_oldPeerID copyWithZone:zone];
    return copy;
}

- (BOOL)isEqual:(id)object
{
    OTAccountMetadataClassC *other = (OTAccountMetadataClassC *)object;
    return [other isMemberOfClass:[self class]]
    &&
    ((!self->_peerID && !other->_peerID) || [self->_peerID isEqual:other->_peerID])
    &&
    ((self->_has.icloudAccountState && other->_has.icloudAccountState && self->_icloudAccountState == other->_icloudAccountState) || (!self->_has.icloudAccountState && !other->_has.icloudAccountState))
    &&
    ((self->_has.epoch && other->_has.epoch && self->_epoch == other->_epoch) || (!self->_has.epoch && !other->_has.epoch))
    &&
    ((!self->_altDSID && !other->_altDSID) || [self->_altDSID isEqual:other->_altDSID])
    &&
    ((self->_has.trustState && other->_has.trustState && self->_trustState == other->_trustState) || (!self->_has.trustState && !other->_has.trustState))
    &&
    ((self->_has.lastHealthCheckup && other->_has.lastHealthCheckup && self->_lastHealthCheckup == other->_lastHealthCheckup) || (!self->_has.lastHealthCheckup && !other->_has.lastHealthCheckup))
    &&
    ((self->_has.attemptedJoin && other->_has.attemptedJoin && self->_attemptedJoin == other->_attemptedJoin) || (!self->_has.attemptedJoin && !other->_has.attemptedJoin))
    &&
    ((self->_has.cdpState && other->_has.cdpState && self->_cdpState == other->_cdpState) || (!self->_has.cdpState && !other->_has.cdpState))
    &&
    ((!self->_syncingPolicy && !other->_syncingPolicy) || [self->_syncingPolicy isEqual:other->_syncingPolicy])
    &&
    ((!self->_voucher && !other->_voucher) || [self->_voucher isEqual:other->_voucher])
    &&
    ((!self->_voucherSignature && !other->_voucherSignature) || [self->_voucherSignature isEqual:other->_voucherSignature])
    &&
    ((!self->_tlkSharesForVouchedIdentitys && !other->_tlkSharesForVouchedIdentitys) || [self->_tlkSharesForVouchedIdentitys isEqual:other->_tlkSharesForVouchedIdentitys])
    &&
    ((!self->_secureElementIdentity && !other->_secureElementIdentity) || [self->_secureElementIdentity isEqual:other->_secureElementIdentity])
    &&
    ((self->_has.isInheritedAccount && other->_has.isInheritedAccount && ((self->_isInheritedAccount && other->_isInheritedAccount) || (!self->_isInheritedAccount && !other->_isInheritedAccount))) || (!self->_has.isInheritedAccount && !other->_has.isInheritedAccount))
    &&
    ((self->_has.warmedEscrowCache && other->_has.warmedEscrowCache && ((self->_warmedEscrowCache && other->_warmedEscrowCache) || (!self->_warmedEscrowCache && !other->_warmedEscrowCache))) || (!self->_has.warmedEscrowCache && !other->_has.warmedEscrowCache))
    &&
    ((self->_has.warnedTooManyPeers && other->_has.warnedTooManyPeers && ((self->_warnedTooManyPeers && other->_warnedTooManyPeers) || (!self->_warnedTooManyPeers && !other->_warnedTooManyPeers))) || (!self->_has.warnedTooManyPeers && !other->_has.warnedTooManyPeers))
    &&
    ((self->_has.sendingMetricsPermitted && other->_has.sendingMetricsPermitted && self->_sendingMetricsPermitted == other->_sendingMetricsPermitted) || (!self->_has.sendingMetricsPermitted && !other->_has.sendingMetricsPermitted))
    &&
    ((!self->_oldPeerID && !other->_oldPeerID) || [self->_oldPeerID isEqual:other->_oldPeerID])
    ;
}

- (NSUInteger)hash
{
    return 0
    ^
    [self->_peerID hash]
    ^
    (self->_has.icloudAccountState ? PBHashInt((NSUInteger)self->_icloudAccountState) : 0)
    ^
    (self->_has.epoch ? PBHashInt((NSUInteger)self->_epoch) : 0)
    ^
    [self->_altDSID hash]
    ^
    (self->_has.trustState ? PBHashInt((NSUInteger)self->_trustState) : 0)
    ^
    (self->_has.lastHealthCheckup ? PBHashInt((NSUInteger)self->_lastHealthCheckup) : 0)
    ^
    (self->_has.attemptedJoin ? PBHashInt((NSUInteger)self->_attemptedJoin) : 0)
    ^
    (self->_has.cdpState ? PBHashInt((NSUInteger)self->_cdpState) : 0)
    ^
    [self->_syncingPolicy hash]
    ^
    [self->_voucher hash]
    ^
    [self->_voucherSignature hash]
    ^
    [self->_tlkSharesForVouchedIdentitys hash]
    ^
    [self->_secureElementIdentity hash]
    ^
    (self->_has.isInheritedAccount ? PBHashInt((NSUInteger)self->_isInheritedAccount) : 0)
    ^
    (self->_has.warmedEscrowCache ? PBHashInt((NSUInteger)self->_warmedEscrowCache) : 0)
    ^
    (self->_has.warnedTooManyPeers ? PBHashInt((NSUInteger)self->_warnedTooManyPeers) : 0)
    ^
    (self->_has.sendingMetricsPermitted ? PBHashInt((NSUInteger)self->_sendingMetricsPermitted) : 0)
    ^
    [self->_oldPeerID hash]
    ;
}

- (void)mergeFrom:(OTAccountMetadataClassC *)other
{
    if (other->_peerID)
    {
        [self setPeerID:other->_peerID];
    }
    if (other->_has.icloudAccountState)
    {
        self->_icloudAccountState = other->_icloudAccountState;
        self->_has.icloudAccountState = YES;
    }
    if (other->_has.epoch)
    {
        self->_epoch = other->_epoch;
        self->_has.epoch = YES;
    }
    if (other->_altDSID)
    {
        [self setAltDSID:other->_altDSID];
    }
    if (other->_has.trustState)
    {
        self->_trustState = other->_trustState;
        self->_has.trustState = YES;
    }
    if (other->_has.lastHealthCheckup)
    {
        self->_lastHealthCheckup = other->_lastHealthCheckup;
        self->_has.lastHealthCheckup = YES;
    }
    if (other->_has.attemptedJoin)
    {
        self->_attemptedJoin = other->_attemptedJoin;
        self->_has.attemptedJoin = YES;
    }
    if (other->_has.cdpState)
    {
        self->_cdpState = other->_cdpState;
        self->_has.cdpState = YES;
    }
    if (other->_syncingPolicy)
    {
        [self setSyncingPolicy:other->_syncingPolicy];
    }
    if (other->_voucher)
    {
        [self setVoucher:other->_voucher];
    }
    if (other->_voucherSignature)
    {
        [self setVoucherSignature:other->_voucherSignature];
    }
    for (NSData *iter_tlkSharesForVouchedIdentitys in other->_tlkSharesForVouchedIdentitys)
    {
        [self addTlkSharesForVouchedIdentity:iter_tlkSharesForVouchedIdentitys];
    }
    if (other->_secureElementIdentity)
    {
        [self setSecureElementIdentity:other->_secureElementIdentity];
    }
    if (other->_has.isInheritedAccount)
    {
        self->_isInheritedAccount = other->_isInheritedAccount;
        self->_has.isInheritedAccount = YES;
    }
    if (other->_has.warmedEscrowCache)
    {
        self->_warmedEscrowCache = other->_warmedEscrowCache;
        self->_has.warmedEscrowCache = YES;
    }
    if (other->_has.warnedTooManyPeers)
    {
        self->_warnedTooManyPeers = other->_warnedTooManyPeers;
        self->_has.warnedTooManyPeers = YES;
    }
    if (other->_has.sendingMetricsPermitted)
    {
        self->_sendingMetricsPermitted = other->_sendingMetricsPermitted;
        self->_has.sendingMetricsPermitted = YES;
    }
    if (other->_oldPeerID)
    {
        [self setOldPeerID:other->_oldPeerID];
    }
}

@end

