// This file was automatically generated by protocompiler
// DO NOT EDIT!
// Compiled from OTAccountSettings.proto

#import "OTWebAccess.h"
#import <ProtocolBuffer/PBConstants.h>
#import <ProtocolBuffer/PBHashUtil.h>
#import <ProtocolBuffer/PBDataReader.h>

#if !__has_feature(objc_arc)
# error This generated file depends on ARC but it is not enabled; turn on ARC, or use 'objc_use_arc' option to generate non-ARC code.
#endif

@implementation OTWebAccess

@synthesize enabled = _enabled;
- (void)setEnabled:(BOOL)v
{
    _has.enabled = (uint)YES;
    _enabled = v;
}
- (void)setHasEnabled:(BOOL)f
{
    _has.enabled = (uint)f;
}
- (BOOL)hasEnabled
{
    return _has.enabled != 0;
}

- (NSString *)description
{
    return [NSString stringWithFormat:@"%@ %@", [super description], [self dictionaryRepresentation]];
}

- (NSDictionary *)dictionaryRepresentation
{
    NSMutableDictionary *dict = [NSMutableDictionary dictionary];
    if (self->_has.enabled)
    {
        [dict setObject:[NSNumber numberWithBool:self->_enabled] forKey:@"enabled"];
    }
    return dict;
}

BOOL OTWebAccessReadFrom(__unsafe_unretained OTWebAccess *self, __unsafe_unretained PBDataReader *reader) {
    while (PBReaderHasMoreData(reader)) {
        uint32_t tag = 0;
        uint8_t aType = 0;

        PBReaderReadTag32AndType(reader, &tag, &aType);

        if (PBReaderHasError(reader))
            break;

        if (aType == TYPE_END_GROUP) {
            break;
        }

        switch (tag) {

            case 1 /* enabled */:
            {
                self->_has.enabled = (uint)YES;
                self->_enabled = PBReaderReadBOOL(reader);
            }
            break;
            default:
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    return NO;
                break;
        }
    }
    return !PBReaderHasError(reader);
}

- (BOOL)readFrom:(PBDataReader *)reader
{
    return OTWebAccessReadFrom(self, reader);
}
- (void)writeTo:(PBDataWriter *)writer
{
    /* enabled */
    {
        if (self->_has.enabled)
        {
            PBDataWriterWriteBOOLField(writer, self->_enabled, 1);
        }
    }
}

- (void)copyTo:(OTWebAccess *)other
{
    if (self->_has.enabled)
    {
        other->_enabled = _enabled;
        other->_has.enabled = YES;
    }
}

- (id)copyWithZone:(NSZone *)zone
{
    OTWebAccess *copy = [[[self class] allocWithZone:zone] init];
    if (self->_has.enabled)
    {
        copy->_enabled = _enabled;
        copy->_has.enabled = YES;
    }
    return copy;
}

- (BOOL)isEqual:(id)object
{
    OTWebAccess *other = (OTWebAccess *)object;
    return [other isMemberOfClass:[self class]]
    &&
    ((self->_has.enabled && other->_has.enabled && ((self->_enabled && other->_enabled) || (!self->_enabled && !other->_enabled))) || (!self->_has.enabled && !other->_has.enabled))
    ;
}

- (NSUInteger)hash
{
    return 0
    ^
    (self->_has.enabled ? PBHashInt((NSUInteger)self->_enabled) : 0)
    ;
}

- (void)mergeFrom:(OTWebAccess *)other
{
    if (other->_has.enabled)
    {
        self->_enabled = other->_enabled;
        self->_has.enabled = YES;
    }
}

@end

